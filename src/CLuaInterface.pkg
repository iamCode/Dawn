$#include "CLuaInterface.h"

enum Direction
{
    STOP = 0,
    N    = 1,
    NE   = 2,
    E    = 3,
    SE   = 4,
    S    = 5,
    SW   = 6,
    W    = 7,
    NW   = 8
};

class CCharacter {
    void baseOnType( std::string otherType );

    void setStrength( int newStrength );
    uint16_t getStrength() const;
    void modifyStrength( int strengthModifier );
    
    void setDexterity( int newDexterity );
    uint16_t getDexterity() const;
    void modifyDexterity( int dexterityModifier );
    
    void setVitality( int newVitality );
    uint16_t getVitality() const;
    void modifyVitality( int vitalityModifier );

    void setIntellect( int newIntellect );
    uint16_t getIntellect() const;
    void modifyIntellect( int intellectModifier );

    void setWisdom( int newWisdom );
    uint16_t getWisdom() const;
    void modifyWisdom( int wisdomModifier );

    void setMaxHealth( int newMaxHealth );
    uint16_t getMaxHealth() const;
    void modifyMaxHealth( int maxHealthModifier );

    void setMaxMana( int newMaxMana );
    uint16_t getMaxMana() const;
    void modifyMaxMana( int maxManaModifier );

    void setMoveTexture( int direction, std::string filename );
    void setLifeTexture( std::string filename );

    void setWanderRadius( int newWanderRadius );
    uint16_t getWanderRadius() const;

    void setName( std::string newName );
    std::string getName() const;

    void setLevel( int newLevel );
    uint8_t getLevel() const;

    void setMinDamage( int newMinDamage );
    uint16_t getMinDamage();

    void setMaxDamage( int newMaxDamage );
    uint16_t getMaxDamage();
    
    void setArmor( int newArmor );
    void setDamageModifierPoints( int newDamageModifierPoints );
    void setHitModifierPoints( int newHitModifierPoints );
    void setEvadeModifierPoints( int newEvadeModifierPoints );

    void addItemToLootTable( Item *item, double dropChance );
};

namespace ItemQuality
{
	enum ItemQuality
	{
		POOR,
		NORMAL,
		ENHANCED,
		RARE,
	LORE
	};
}
namespace ItemSlot
{
    enum ItemSlot
{
        HEAD,
        AMULET,
        MAIN_HAND,
        OFF_HAND,
        BELT,
        LEGS,
        SHOULDER,
        CHEST,
        GLOVES,
        CLOAK,
        BOOTS,
        RING_ONE,
        RING_TWO,
        COUNT // this is always the last and gives the size of the enum
};
}

namespace EquipPosition
{
	enum EquipPosition
	{
		MAIN_HAND,
		OFF_HAND,
		CHEST,
		LEGS,
		BELT,
		BOOTS,
		RING,
		GLOVES,
		HEAD,
		CLOAK,
		AMULET,
		SHOULDER,
		NONE
	};
}

namespace ItemType
{
	enum ItemType
	{
		QUESTITEM,
		MISCELLANEOUS,
		ARMOR,
		WEAPON,
		JEWELRY,
		COUNT
	};
}

namespace ArmorType
{
	enum ArmorType
	{
		NO_ARMOR,
		CLOTH,
		LEATHER,
		MAIL,
		PLATE
	};
}

namespace WeaponType
{
	enum WeaponType
	{
		NO_WEAPON,
		ONEHAND_SWORD,
		TWOHAND_SWORD,
		DAGGER,
		STAFF,
		ONEHAND_CLUB,
		TWOHAND_CLUB,
		WAND,
		SPELLBOOK, // offhand spellbooks for caster classes.
		ONEHAND_MACE,
		TWOHAND_MACE,
		ONEHAND_AXE,
		TWOHAND_AXE,
		BOW,
		SLINGSHOT,
		CROSSBOW,
		SHIELD
	};
}

class Item
{
	void setDescription( std::string description );
	void setStrength( int strength );
	void setDexterity( int dexterity );
	void setIntellect( int intellect );
	void setVitality( int vitality );
	void setWisdom( int wisdom );
	void setHealth( int health );
	void setMana( int mana );
	void setArmor( int armor );
	void setDamageModifierPoints( int damageModifierPoints );
	void setHitModifierPoints( int hitModifierPoints );
	void setEvadeModifierPoints( int evadeModifierPoints ); 
	void setMinDamage( int minDamage );
	void setMaxDamage( int maxDamage );
	void setLevelReq( int levelReq );
};


namespace DawnInterface
{
    CCharacter* createNewMobType( std::string typeID );
	Item* createNewItem(std::string name,
		                int sizeX,
		                int sizeY,
		                std::string symbolFile,
		                ItemQuality::ItemQuality itemQuality,
		                EquipPosition::EquipPosition equipPosition,
		                ItemType::ItemType itemType,
		                ArmorType::ArmorType armorType,
		                WeaponType::WeaponType weaponType );
	void giveItemToPlayer( Item* item );
    CZone* getCurrentZone();
    void addMobSpawnPoint( std::string mobID, int x_pos, int y_pos, int respawn_rate, int do_respawn, CZone *zone );
}

