$#include "CLuaInterface.h"

enum Direction
{
    STOP = 0,
    N    = 1,
    NE   = 2,
    E    = 3,
    SE   = 4,
    S    = 5,
    SW   = 6,
    W    = 7,
    NW   = 8
};

namespace ActivityType
{
	enum ActivityType
	{
		Walking,
		Casting,
		Attacking,
		Count
	};
}

namespace Attitude
{
	enum Attitude
	{
		FRIENDLY,
		NEUTRAL,
		HOSTILE
	};
}

class CCharacter {
    void baseOnType( std::string otherType );

    void setStrength( int newStrength );
    int getStrength() const;
    void modifyStrength( int strengthModifier );

    void setDexterity( int newDexterity );
    int getDexterity() const;
    void modifyDexterity( int dexterityModifier );

    void setVitality( int newVitality );
    int getVitality() const;
    void modifyVitality( int vitalityModifier );

    void setIntellect( int newIntellect );
    int getIntellect() const;
    void modifyIntellect( int intellectModifier );

    void setWisdom( int newWisdom );
    int getWisdom() const;
    void modifyWisdom( int wisdomModifier );

    void setMaxHealth( int newMaxHealth );
    int getMaxHealth() const;
    void modifyMaxHealth( int maxHealthModifier );

    void setMaxMana( int newMaxMana );
    int getMaxMana() const;
    void modifyMaxMana( int maxManaModifier );

	void setNumMoveTexturesPerDirection( ActivityType::ActivityType activity, int numTextures );
    void setMoveTexture( ActivityType::ActivityType activity, int direction, int index, std::string filename );
    void setLifeTexture( std::string filename );

    void setWanderRadius( int newWanderRadius );
    int getWanderRadius() const;

    void setName( std::string newName );
    std::string getName() const;

    void setLevel( int newLevel );
    int getLevel() const;

    void setMinDamage( int newMinDamage );
    int getMinDamage();

    void setMaxDamage( int newMaxDamage );
    int getMaxDamage();

    void setArmor( int newArmor );
    void setDamageModifierPoints( int newDamageModifierPoints );
    void setHitModifierPoints( int newHitModifierPoints );
    void setEvadeModifierPoints( int newEvadeModifierPoints );
    void setBlockModifierPoints( int newBlockModifierPoints );
	void setMeleeCriticalModifierPoints( int newMeleeCriticalModifierPoints );
	void setResistElementModifierPoints( ElementType::ElementType elementType, int newResistElementModifierPoints );
	void setResistAllModifierPoints( int newResistAllModifierPoints );
	void setSpellEffectElementModifierPoints( ElementType::ElementType elementType, int newSpellEffectElementModifierPoints );
	void setSpellEffectAllModifierPoints( int newSpellEffectAllModifierPoints );
	void setSpellCriticalModifierPoints( int newSpellCriticalModifierPoints );
	void setHealthRegen( int newHealthRegen );
	void setManaRegen( int newManaRegen );

    void setBoundingBox( int bbx, int bby, int bbw, int bbh );
    void setUseBoundingBox( bool use );

    void addItemToLootTable( Item *item, double dropChance );
    void setCoinDrop( int minCoinDrop, int maxCoinDrop, double dropChance );

	void setPosition( int xpos, int ypos );
};

namespace StatsType
{
    enum StatsType
    {
        Dexterity,
        Intellect,
        Strength,
        Vitality,
        Wisdom,
        Health,
        Mana,
        Armor,
        DamageModifier,
        HitModifier,
        EvadeModifier,
        BlockModifier,
        MeleeCritical,
        SpellCritical,
        ResistAll,
        SpellEffectAll,
        HealthRegen,
        ManaRegen,
        Count
    };
}

namespace ElementType
{
	enum ElementType
	{
		Fire,
		Water,
		Air,
		Earth,
		Light,
		Dark,
		Count
	};
}

namespace EffectType
{
	enum EffectType {
		SingleTargetSpell,
		SelfAffectingSpell
	};
}

namespace PositionType
{
	enum PositionType
	{
		BOTTOMLEFT,
		BOTTOMCENTER,
		LEFTCENTER,
		CENTER
	};
}

namespace ItemQuality
{
	enum ItemQuality
	{
		POOR,
		NORMAL,
		ENHANCED,
		RARE,
	LORE
	};
}

namespace ItemSlot
{
    enum ItemSlot
    {
        HEAD,
        AMULET,
        MAIN_HAND,
        OFF_HAND,
        BELT,
        LEGS,
        SHOULDER,
        CHEST,
        GLOVES,
        CLOAK,
        BOOTS,
        RING_ONE,
        RING_TWO,
        COUNT // this is always the last and gives the size of the enum
    };
}

namespace EquipPosition
{
	enum EquipPosition
	{
		MAIN_HAND,
		OFF_HAND,
		CHEST,
		LEGS,
		BELT,
		BOOTS,
		RING,
		GLOVES,
		HEAD,
		CLOAK,
		AMULET,
		SHOULDER,
		NONE
	};
}

namespace ItemType
{
	enum ItemType
	{
		QUESTITEM,
		MISCELLANEOUS,
		ARMOR,
		WEAPON,
		JEWELRY,
		SCROLL,
		POTION,
		FOOD,
		DRINK,
		NEWSPELL,
		COUNT
	};
}

namespace ArmorType
{
	enum ArmorType
	{
		NO_ARMOR,
		CLOTH,
		LEATHER,
		MAIL,
		PLATE
	};
}

namespace WeaponType
{
	enum WeaponType
	{
		NO_WEAPON,
		ONEHAND_SWORD,
		TWOHAND_SWORD,
		DAGGER,
		STAFF,
		ONEHAND_CLUB,
		TWOHAND_CLUB,
		WAND,
		SPELLBOOK, // offhand spellbooks for caster classes.
		ONEHAND_MACE,
		TWOHAND_MACE,
		ONEHAND_AXE,
		TWOHAND_AXE,
		BOW,
		SLINGSHOT,
		CROSSBOW,
		SHIELD
	};
}

class CSpellActionBase
{
};

class CSpell : public CSpellActionBase
{
};

class Item
{
	void setDescription( std::string description );
	void setStats( StatsType::StatsType statsType, int amount );
	void setResistElementModifierPoints( ElementType::ElementType elementType, int resistModifierPoints );
	void setSpellEffectElementModifierPoints( ElementType::ElementType elementType, int spellEffectElementModifierPoints );
	void setMinDamage( int minDamage );
	void setMaxDamage( int maxDamage );
	void setLevelReq( int levelReq );
	void setValue( int newValue );
	void setSpellCharges( int newSpellCharges );
	void setSpell( CSpell *newSpell );
};

namespace InteractionType
{
	enum InteractionType
	{
		Quest,
		Shop,
		Zone
	};
}

class InteractionPoint
{
	void setPosition( int posX, int posY, int width, int height );
	void setInteractionType( InteractionType::InteractionType interactionType );
	void setBackgroundTexture( std::string texturename );
	void setInteractionCode( std::string interactionCode );
};

class InteractionRegion
{
	void setPosition( int left, int bottom, int width, int height );
	void setOnEnterText( std::string enterCode );
	void setOnLeaveText( std::string leaveCode );
};

class CallIndirection
{
};

class LuaCallIndirection : public CallIndirection
{
	void setExecuteText( std::string text );
};

class CNPC : public CCharacter
{
	void addOnDieEventHandler( CallIndirection *eventHandler );
	void setAttitude( Attitude::Attitude attitude );
};

class Player : public CCharacter
{
	std::string getSaveText();
};

class TextWindow
{
	void setText( std::string text );
	void setAutocloseTime( int autocloseTime );
	void setPosition( PositionType::PositionType, int x, int y );
};

class Shop
{
	void setVisible( bool newVisible );
	void addItem( Item *item );
};

class ConfigurableSpell : public CSpell
{
	void setCastTime( int newCastTime );
	void setCooldown( int newCooldown );
	void setManaCost( int newManaCost );
	void setName( std::string newName );
	void setInfo( std::string newInfo );

	void setSpellSymbol( std::string symbolFile );
};

class GeneralDamageSpell : public ConfigurableSpell
{
	void setDirectDamage( int newMinDirectDamage, int newMaxDirectDamage, ElementType::ElementType newElementDirect );
	void setContinuousDamage( double newMinContDamagePerSec, double newMaxContDamagePerSec, int newContDamageTime, ElementType::ElementType newContDamageElement );
};

class GeneralRayDamageSpell : public GeneralDamageSpell
{
	void setNumAnimations( int count );
	void setAnimationTexture( int num, std::string filename );
};

class GeneralBoltDamageSpell : public GeneralDamageSpell
{
	void setMoveSpeed( int newMoveSpeed );
	void setExpireTime( int newExpireTime );
	void setNumAnimations( int count );
	void setAnimationTexture( int num, std::string filename );
};

class GeneralHealingSpell : public ConfigurableSpell
{
	void setEffectType( EffectType::EffectType newEffectType );
	void setHealEffect( int healEffectMin, int healEffectMax, ElementType::ElementType healEffectElement );
};

class GeneralBuffSpell : public ConfigurableSpell
{
	void setEffectType( EffectType::EffectType newEffectType );
	void setDuration( int newDuration );
	void setStats( StatsType::StatsType statsType, int amount );
	void setResistElementModifierPoints( ElementType::ElementType elementType, int resistModifierPoints );
	void setSpellEffectElementModifierPoints( ElementType::ElementType elementType, int spellEffectElementModifierPoints );

};

namespace DawnInterface
{
    CCharacter* createNewMobType( std::string typeID );
	Item* createNewItem(std::string name,
		                int sizeX,
		                int sizeY,
		                std::string symbolFile,
		                ItemQuality::ItemQuality itemQuality,
		                EquipPosition::EquipPosition equipPosition,
		                ItemType::ItemType itemType,
		                ArmorType::ArmorType armorType,
		                WeaponType::WeaponType weaponType );
	void giveItemToPlayer( Item* item );
	CNPC* addMobSpawnPoint( std::string mobID, int x_pos, int y_pos, int respawn_rate, int do_respawn );
	void removeMobSpawnPoint( CNPC *mobSpawnPoint );
	GeneralRayDamageSpell* createGeneralRayDamageSpell();
	GeneralBoltDamageSpell* createGeneralBoltDamageSpell();
	GeneralHealingSpell* createGeneralHealingSpell();
	GeneralBuffSpell* createGeneralBuffSpell();
	void inscribeSpellInPlayerSpellbook( CSpell *inscribedSpell );
	InteractionPoint* addInteractionPoint();
	InteractionPoint* addCharacterInteractionPoint( CCharacter *character );
	InteractionRegion* addInteractionRegion();
	TextWindow *createTextWindow();
	void removeInteractionPoint( InteractionPoint *pointToRemove );
	void removeInteractionRegion( InteractionRegion *regionToRemove );
	LuaCallIndirection* createEventHandler();
	void addQuest( std::string questName, std::string questDescription );
	void removeQuest( std::string questName );
	void changeQuestDescription( std::string questName, std::string newDescription );
	Shop *addShop();
	void enterZone( std::string zoneName, int enterX, int enterY );
	bool isSavingAllowed();
	void setSavingAllowed( bool savingAllowed );

	Player *getPlayer();

	// functions used for loading only
	std::string getQuestSaveText();
	std::string getInventorySaveText();
	std::string getSpellbookSaveText();
	void restoreItemInBackpack( Item *item, int inventoryPosX, int inventoryPosY );
	void restoreWieldItem( int slot, Item *item );
	void restoreGroundLootItem( Item *item, int xPos, int yPos );
	void restoreGroundGold( int amount, int xPos, int yPos );
	void setCurrentZone( std::string zoneName );
	std::string getAllZonesSaveText();
	std::string getReenterCurrentZoneText();
	std::string getItemReferenceRestore( CCharacter *character );
	std::string getItemReferenceRestore( InteractionPoint *interactionPoint );
	std::string getItemReferenceRestore( InteractionRegion *interactionRegion );
	std::string getItemReferenceRestore( Shop *shop );
	std::string getItemReferenceRestore( CallIndirection *eventHandler );
	std::string getItemReferenceRestore( TextWindow *textWindow );
	CCharacter* restoreCharacterReference( std::string zoneName, int posInArray );
	InteractionPoint* restoreInteractionPointReference( std::string zoneName, int posInArray );
	InteractionRegion* restoreInteractionRegionReference( std::string zoneName, int posInArray );
	CallIndirection* restoreEventHandlerReference( std::string zoneName, int posInArray );
	std::string getActionbarSaveText();
	void restoreActionBar( int buttonNr, CSpellActionBase *action );
}
